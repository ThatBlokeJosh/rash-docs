{"/about/":{"data":{"":"Hi, I’m Josh. I’m a young pasionate software-developer that loves building complex applications. I have always entertained the idea of sometime writting my own language, so I finnaly did it.\nIntroducing Rash, the reasonable bash alternative. An easy to write scripting language that has very easy shell access"},"title":"About"},"/docs/":{"data":{"":"Welcome to the docs of Rash-lang, a simple scripting language with easy access to the shell, but with reasonable syntax!","hello-world#Hello, World!":"script.rashfor i = 0; i \u003c= 10; ++i; { print(\"HELLO WORLD!\") } "},"title":"Documentation"},"/docs/concepts/":{"data":{"":"Rash is has an intuitive syntax, borrowing from languages like python, go and even a little rust.\nexample.rash print(\"Rash is quite cool!\") // Standard comments url = \"https://pokey.remington.boo\" // Great website c\"curl ${url}\" // Command strings "},"title":"Key Concepts"},"/docs/concepts/conditions/":{"data":{"":"Rash supports if, else if and else\nconditions.rashx = 1; if x == 1; { print(\"I love rash\") } else if x != 1; { print(\"I still love rash\") } else { print(\"Rash is the best\") } "},"title":"Conditions"},"/docs/concepts/functions/":{"data":{"":"Bash supports functions, define your own like so:\nfunctions.rashfn add(x, y) { print(f\"Adding ${x} and ${y}\"); return {x + y}; } // Call them like so z = add(5, 6) "},"title":"Functions"},"/docs/concepts/loops/":{"data":{"":"","#":"Similarly to Go, Rash has two loop types\nStandard iterator style loops.rasharr = [0, 1, 5, 6] for i = 0; i \u003c len(arr); ++i; { print(arr[i]); } While loop style loops.rashfor true; { print(\"Bash stinks\") } "},"title":"Loops"},"/docs/concepts/operations/":{"data":{"":"Supported binary operations are:\nvariables.rash x = 5; // Assignment x + 4; // Adittion x - 1; // Subtraction x * 4; x / 2; // Multiplication and division x == 4 \u0026\u0026 x \u003c= 2; // And, or, equals, lesser, greater etc. "},"title":"Operations"},"/docs/concepts/std/":{"data":{"":"Rash has a WIP standard library, you can use some of the provided functions like so:\nstd.rashimport {math, cmd} z = pow(2, 2) curl(\"GET\", \"https://pokey.remington.boo\") // Visits a great website "},"title":"Standard library"},"/docs/concepts/types/":{"data":{"":"","arraysarray#\u003ca href=\"array\"\u003eArrays\u003c/a\u003e":"Rash has a few types:\nStrings Integers Booleans Arrays ","booleansbool#\u003ca href=\"bool\"\u003eBooleans\u003c/a\u003e":"","integersinteger#\u003ca href=\"integer\"\u003eIntegers\u003c/a\u003e":"","stringsstring#\u003ca href=\"string\"\u003eStrings\u003c/a\u003e":""},"title":"Types"},"/docs/concepts/variables/":{"data":{"":"Rash has a dynamic type system not to dissimilar to pythons, variables are declared like so:\nvariables.rash name = 5; // Optional semi-colon print(name); text = \"Hello World\" rash_is_cool = true; arrr = [0, 4, 2, 1] "},"title":"Variables"},"/docs/getting-started/":{"data":{"":"","install#Install":"Install git clone https://github.com/ThatBlokeJosh/rash.git cd rash cargo build ./target/debug/rash script.rash "},"title":"Getting Started"}}